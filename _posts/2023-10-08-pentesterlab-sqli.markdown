---
layout: post
title:  "PentesterLab SQL Injection Labs"
author: "Electro"
date:   2023-10-08 10:25:54 +0100
---
# PentesterLab SQL Injection Labs

## SQL Injection 01
We are greeted with a plain looking login page:

![](../assets/sql_01_login_page.png)

The challenge description contains the sql query (and frankly most of the solution lol), so we know it looks like:

 ```SELECT * FROM user WHERE login='[USER]' and password='[PASSWORD]'```

 so we try the most basic injection payload:
```' OR 1=1-- ``` in both fields

![](../assets/sql_01_payload.png)

and that solves the lab, cool :)

![](../assets/sql_01_solved.png)

## SQL Injection 02

The challenge description is a bit more vague this time so let's launch the instance:

![](../assets/sql_02_login_page.png)

Well it looks exactly like sql 01 so let's try the same payload:

![](../assets/sql_02_invalid.png)

Hmm, no luck......

Well the challenge description did mention something about double quotes, so let's try that:

![](../assets/sql_02_double_quotes.png)

And that solves it, Yay :)

![](../assets/sql_02_solved.png)

## SQL Injection 03

The challenge prompt:

![ ](../assets/sql_03_prompt.png)

So it seems the developer is checking whether there is only one result because in our with our previous payloads all the rows will be returned because the condition ```1=1``` will always evaluate to true. But let's try anyway:

![No luck](../assets/sql_03_failed.png)


So how do we get around that?

Well, the prompt gave us a hint: so a quick google search about the ```LIMIT``` keyword shows that it is basically used to return the first n matches of a query so we can add something like ```LIMIT 1``` to our query to the end of our payload to make it only return one result, thereby passing the check. 
Let's try:

![ ](../assets/sql_03_limit.png)

Aaaand it works!!!

![ ](../assets/sql_03_solved.png)

Nice :)


## SQL Injection 04

First, the prompt:

![ ](../assets/sql_04_prompt.png)

This basically means our payload can't contain any spaces and sure enough when we try...:

![ ](../assets/sql_04_try_quotes.png)


![it fails](../assets/sql_04_failed.png)

But the prompt also suggests we use tabs so let's try that, but when we try to press the tab key in the input fields we find we can't. So how do we include tabs in our input? 

You can use an intercepting proxy like Burp to edit the request and change the spaces to tabs but I just decided the [HackBar Chrome extension](https://chrome.google.com/webstore/detail/hackbar/ginpbkfigcoaokgflihfhhmglmbchinc/related):


![ ](../assets/sql_04_hackbar.png)

The url-encoded form of the \t (tab) character is %09 (highlighted in yellow)

Click on Execute and...

![ ](../assets/sql_04_solved.png)

We log in!!! Sweet :)

## SQL Injection 05

As usual: The prompt:

![ ](../assets/sql_05_prompt.png)

It seems the developer also blocked tabs this time around but 